import groovy.swing.SwingBuilder

plugins {
    id "net.ltgt.errorprone" version "0.0.8"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "org.moallemi.advanced-build-version" version "1.5.3"
}

apply plugin: 'com.android.application'
apply plugin: 'android-apt'

advancedVersioning {
    codeOptions {
        versionCodeType org.moallemi.gradle.internal.VersionCodeType.DATE
    }
    nameOptions {
        versionMajor 1
        versionMinor 0
        versionPatch 0
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.3'

    defaultConfig {
        applicationId "eu.se_bastiaan.tvnl"
        minSdkVersion 21
        targetSdkVersion 24
        versionCode advancedVersioning.versionCode
        versionName advancedVersioning.versionName
        multiDexEnabled true

        renderscriptTargetApi 21
        renderscriptSupportModeEnabled false
    }

    packagingOptions {
        exclude 'META-INF/beans.xml'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        mainConfig {
            storeFile file(System.getenv("SIGN_STORE_FILE").toString())
            keyAlias System.getenv("KEY_ALIAS").toString()
            keyPassword 'password' // Fictive password to pass Gradle check
            storePassword 'password' // Fictive password to pass Gradle check
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.mainConfig
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

ext {
    supportLibVersion = '25.0.0'
    nucleusVersion = '4.0.0'
    retrofitVersion = '2.1.0'
    okhttpVersion = '3.4.1'
    daggerVersion = '2.7'
    butterknifeVersion = '8.4.0'
}

/**
 * Run `gradle dependencyUpdates -Drevision=release` to check for dependency updates
 */
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:multidex:1.0.1'
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:leanback-v17:${supportLibVersion}"
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:palette-v7:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:support-v13:${supportLibVersion}"

    compile 'com.google.code.gson:gson:2.7'

    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
    compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"
    compile 'com.squareup:otto:1.3.8'

    compile 'com.github.bumptech.glide:glide:3.7.0'

    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.2.1'

    compile "com.google.dagger:dagger:${daggerVersion}"
    apt "com.google.dagger:dagger-compiler:${daggerVersion}"
    provided 'javax.annotation:jsr250-api:1.0'

    compile 'com.jakewharton.timber:timber:4.3.1'
    compile 'net.ypresto.timbertreeutils:timbertreeutils:1.0.0'

    compile "com.jakewharton:butterknife:${butterknifeVersion}"
    apt "com.jakewharton:butterknife-compiler:${butterknifeVersion}"

    compile 'uk.co.chrisjenx:calligraphy:2.2.0'

    compile 'me.zhanghai.android.materialprogressbar:library:1.1.6'

    compile 'com.devbrackets.android:exomedia:2.5.6'

    compile "info.android15.nucleus:nucleus:${nucleusVersion}"
    compile "info.android15.nucleus:nucleus-support-v4:${nucleusVersion}"
    compile "info.android15.nucleus:nucleus-support-v7:${nucleusVersion}"
}

configurations.errorprone {
    // 2.0.5 is the last version compatible with JDK 7
    resolutionStrategy.force 'com.google.errorprone:error_prone_core:2.0.5'
}

gradle.taskGraph.whenReady { taskGraph ->
    if(taskGraph.hasTask(':app:assembleRelease')) {

        def pass = System.getenv("ALIAS_KEY") ? System.getenv("ALIAS_KEY").toString() : ''
        def store_pass = System.getenv("STORE_KEY") ? System.getenv("STORE_KEY").toString() : ''
        if(pass == '' || store_pass == '') {
            if (System.console() == null) {
                new SwingBuilder().edt {
                    dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                            title: 'Enter password', // Dialog title
                            alwaysOnTop: true, // pretty much what the name says
                            resizable: false, // Don't allow the user to resize the dialog
                            locationRelativeTo: null, // Place dialog in center of the screen
                            pack: true, // We need to pack the dialog (so it will take the size of it's children)
                            show: true // Let's show it
                    ) {
                        vbox { // Put everything below each other
                            label(text: "Please enter storage passphrase:")
                            input = passwordField()
                            button(defaultButton: true, text: 'OK', actionPerformed: {
                                store_pass = input.password;
                                // Set pass variable to value of input field
                                dispose(); // Close dialog
                            })
                        } // vbox end
                        vbox { // Put everything below each other
                            label(text: "Please enter key passphrase:")
                            input = passwordField()
                            button(defaultButton: true, text: 'OK', actionPerformed: {
                                pass = input.password; // Set pass variable to value of input field
                                dispose(); // Close dialog
                            })
                        } // vbox end
                    } // dialog end
                } // edt end
            } else {
                store_pass = System.console().readPassword("\nPlease enter storage passphrase: ")
                store_pass = new String(store_pass)
                pass = System.console().readPassword("\nPlease enter key passphrase: ")
                pass = new String(pass)
            }

            if (pass.size() <= 0) {
                throw new InvalidUserDataException("You must enter a password to proceed.")
            }
        }

        android.signingConfigs.mainConfig.keyPassword = pass
        android.signingConfigs.mainConfig.storePassword = store_pass

    } // end if has task
} // end whenReady